{"ast":null,"code":"var _jsxFileName = \"/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions/index';\n/**\n * Google auth component which renders login/logout google buttons and uses gapi methods for creating a new auth object, signing in a user or signing out\n * please see docs for reference\n */\n\nclass GoogleAuth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: null\n    };\n\n    this.onAuthChange = isSignedIn => {\n      return isSignedIn ? this.props.signIn() : this.props.signOut;\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n\n    this.renderAuthButton = () => {\n      if (this.state.isSignedIn === null) {\n        return null;\n      } else if (this.state.isSignedIn) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"ui red google button\",\n          onClick: this.onSignOutClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"google icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        }), \"Sign out\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"ui red google button\",\n          onClick: this.onSignInClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"google icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }), \"Sing in with Google\");\n      }\n    };\n  }\n\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client.init({\n        clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n        scope: 'email' //the list of scopes [methods of authorization]\n\n      }).then(() => {\n        //create a new auth reference to use for the user auth\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.setState({\n          isSignedIn: this.auth.isSignedIn.get() //in the docs to check user is signed in\n\n        });\n        this.auth.isSignedIn.listen(this.onAuthChange); //listen for the users current signin status (inn the gapi docs also) ALL THESE METHODS AND WEIRD CODE SNIPPETS ARE APART OF THE GAPI!!\n      });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  } //use the props mapped from state to sign in or out depending on the auth step\n\n\n  render() {\n    return this.renderAuthButton();\n  }\n\n} //use connect to hook in to store passing it all the action creators to dispatch to store: reducers will invoke logic, mapStateToProps() always does just that: maps state\n\n\nexport default connect(null, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js"],"names":["React","Component","connect","signIn","signOut","GoogleAuth","state","isSignedIn","onAuthChange","props","onSignInClick","auth","onSignOutClick","renderAuthButton","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","setState","get","listen","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,kBAA9B;AAEA;;;;;AAKA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAEjCK,KAFiC,GAEzB;AACNC,MAAAA,UAAU,EAAE;AADN,KAFyB;;AAAA,SA8BjCC,YA9BiC,GA8BlBD,UAAU,IAAI;AAC3B,aAAOA,UAAU,GAAG,KAAKE,KAAL,CAAWN,MAAX,EAAH,GAA0B,KAAKM,KAAL,CAAWL,OAAtD;AACD,KAhCgC;;AAAA,SAkCjCM,aAlCiC,GAkCjB,MAAM;AACpB,WAAKC,IAAL,CAAUR,MAAV;AACD,KApCgC;;AAAA,SAsCjCS,cAtCiC,GAsChB,MAAM;AACrB,WAAKD,IAAL,CAAUP,OAAV;AACD,KAxCgC;;AAAA,SA2CjCS,gBA3CiC,GA2Cd,MAAM;AACvB,UAAI,KAAKP,KAAL,CAAWC,UAAX,KAA0B,IAA9B,EAAoC;AAClC,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKD,KAAL,CAAWC,UAAf,EAA2B;AAChC,4BACE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAE,KAAKK,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,aADF;AAQD,OATM,MASA;AACL,4BACE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAE,KAAKF,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,wBADF;AAMD;AACF,KA/DgC;AAAA;;AAMjC;AACAI,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAkB,cAAlB,EAAkC,MAAM;AACtC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACS;AACLC,QAAAA,QAAQ,EAAE,0EADL;AAELC,QAAAA,KAAK,EAAE,OAFF,CAEW;;AAFX,OADT,EAKGC,IALH,CAKS,MAAM;AACX;AACA,aAAKX,IAAL,GAAYI,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKC,QAAL,CAAe;AACblB,UAAAA,UAAU,EAAE,KAAKI,IAAL,CAAUJ,UAAV,CAAqBmB,GAArB,EADC,CAC4B;;AAD5B,SAAf;AAGA,aAAKf,IAAL,CAAUJ,UAAV,CAAqBoB,MAArB,CAA6B,KAAKnB,YAAlC,EANW,CAMsC;AAClD,OAZH;AAaD,KAfD;AAgBA;;;AAGD,GA3BgC,CA6BjC;;;AAoCAoB,EAAAA,MAAM,GAAI;AACR,WAAO,KAAKf,gBAAL,EAAP;AACD;;AAnEgC,C,CAsEnC;;;AACA,eAAeX,OAAO,CAAE,IAAF,EAAQ;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAR,CAAP,CAAmCC,UAAnC,CAAf","sourcesContent":["import React, {Component} from 'react';\n\nimport {connect} from 'react-redux';\nimport {signIn, signOut} from '../actions/index';\n\n/**\n * Google auth component which renders login/logout google buttons and uses gapi methods for creating a new auth object, signing in a user or signing out\n * please see docs for reference\n */\n\nclass GoogleAuth extends Component {\n  //initialize user signed in to null [is not signed in] and set state to be loggerd in with the gapi methods to do so [see did mount]\n  state = {\n    isSignedIn: null,\n  };\n\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount () {\n    window.gapi.load ('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client\n        .init ({\n          clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n          scope: 'email', //the list of scopes [methods of authorization]\n        })\n        .then (() => {\n          //create a new auth reference to use for the user auth\n          this.auth = window.gapi.auth2.getAuthInstance ();\n          this.setState ({\n            isSignedIn: this.auth.isSignedIn.get (), //in the docs to check user is signed in\n          });\n          this.auth.isSignedIn.listen (this.onAuthChange); //listen for the users current signin status (inn the gapi docs also) ALL THESE METHODS AND WEIRD CODE SNIPPETS ARE APART OF THE GAPI!!\n        });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  }\n\n  //use the props mapped from state to sign in or out depending on the auth step\n  onAuthChange = isSignedIn => {\n    return isSignedIn ? this.props.signIn () : this.props.signOut;\n  };\n\n  onSignInClick = () => {\n    this.auth.signIn ();\n  };\n\n  onSignOutClick = () => {\n    this.auth.signOut ();\n  };\n\n  //helper method to do conditional rendering of button for sign in/sign out pertaining to the gapi auth\n  renderAuthButton = () => {\n    if (this.state.isSignedIn === null) {\n      return null;\n    } else if (this.state.isSignedIn) {\n      return (\n        <button className=\"ui red google button\" onClick={this.onSignOutClick}>\n          {/**did not use explicit constructor bind! used arrows and passed it as a callback here so its bound by default when using arrows.\n          THIS IS THE BEST PARADIGM! DO NOT USE () ON THE END OR ELSE ITS IMMEDIATELY CALLED! WE WANT THIS TO BE A CALLBACK*/}\n          <i className=\"google icon\" />\n          Sign out\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"ui red google button\" onClick={this.onSignInClick}>\n          <i className=\"google icon\" />\n          Sing in with Google\n        </button>\n      );\n    }\n  };\n\n  render () {\n    return this.renderAuthButton ();\n  }\n}\n\n//use connect to hook in to store passing it all the action creators to dispatch to store: reducers will invoke logic, mapStateToProps() always does just that: maps state\nexport default connect (null, {signIn, signOut}) (GoogleAuth);\n"]},"metadata":{},"sourceType":"module"}