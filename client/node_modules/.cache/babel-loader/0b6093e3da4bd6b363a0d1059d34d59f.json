{"ast":null,"code":"var _jsxFileName = \"/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js\";\nimport React, { Component } from 'react';\n\nclass GoogleAuth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: null\n    };\n\n    this.renderAuthButton = () => {\n      if (this.state.isSignedIn === null) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 14\n          }\n        }, \"I do not know if we are signed in\");\n      } else if (this.state.isSignedIn) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 14\n          }\n        }, \"I am signed in\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"dic\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 14\n          }\n        }, \"Not signed in\");\n      }\n    };\n  }\n\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client.init({\n        clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n        scope: 'email' //the list of scopes [methods of authorization]\n\n      }).then(() => {\n        //create a new auth reference to use for the user auth\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.setState({\n          isSignedIn: this.auth.inSignedIn.get() //in the docs to check user is signed in\n\n        });\n      });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"renderAuthButton();\");\n  }\n\n}\n\nexport default GoogleAuth;","map":{"version":3,"sources":["/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js"],"names":["React","Component","GoogleAuth","state","isSignedIn","renderAuthButton","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth","auth2","getAuthInstance","setState","inSignedIn","get","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAEjCE,KAFiC,GAEzB;AACNC,MAAAA,UAAU,EAAE;AADN,KAFyB;;AAAA,SA4BjCC,gBA5BiC,GA4Bd,MAAM;AACvB,UAAG,KAAKF,KAAL,CAAWC,UAAX,KAA0B,IAA7B,EAAkC;AAChC,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAP;AACD,OAFD,MAEM,IAAI,KAAKD,KAAL,CAAWC,UAAf,EAA0B;AAC9B,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD,OAFK,MAED;AACH,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACD;AACF,KApCgC;AAAA;;AAMjC;AACAE,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAkB,cAAlB,EAAkC,MAAM;AACtC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACS;AACLC,QAAAA,QAAQ,EAAE,0EADL;AAELC,QAAAA,KAAK,EAAE,OAFF,CAEW;;AAFX,OADT,EAKGC,IALH,CAKS,MAAM;AACX;AACA,aAAKC,IAAL,GAAYR,MAAM,CAACC,IAAP,CAAYQ,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKC,QAAL,CAAe;AACbd,UAAAA,UAAU,EAAE,KAAKW,IAAL,CAAUI,UAAV,CAAqBC,GAArB,EADC,CAC4B;;AAD5B,SAAf;AAGD,OAXH;AAYD,KAdD;AAeA;;;AAGD;;AAYDC,EAAAA,MAAM,GAAI;AACR,wBACE,gEADF;AAKD;;AA5CgC;;AA+CnC,eAAenB,UAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass GoogleAuth extends Component {\n  //initialize user signed in to null [is not signed in]\n  state = {\n    isSignedIn: null,\n  };\n\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount () {\n    window.gapi.load ('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client\n        .init ({\n          clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n          scope: 'email', //the list of scopes [methods of authorization]\n        })\n        .then (() => {\n          //create a new auth reference to use for the user auth\n          this.auth = window.gapi.auth2.getAuthInstance ();\n          this.setState ({\n            isSignedIn: this.auth.inSignedIn.get (), //in the docs to check user is signed in\n          });\n        });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  }\n\n  renderAuthButton = () => {\n    if(this.state.isSignedIn === null){\n      return <div>I do not know if we are signed in</div>\n    }else if (this.state.isSignedIn){\n      return <div>I am signed in</div>\n    }else{\n      return <dic>Not signed in</dic>\n    }\n  }\n\n  render () {\n    return (\n      <>\n        renderAuthButton();\n      </>\n    );\n  }\n}\n\nexport default GoogleAuth;\n"]},"metadata":{},"sourceType":"module"}