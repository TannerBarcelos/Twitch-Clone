{"ast":null,"code":"var _jsxFileName = \"/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; //import actions to component we want to give stsate to from our store: remember, we pass our action creators to connecT(,here) to dispatch the actions\n//to the store and invoke reducers to change state\n\nimport { signIn, signOut } from '../actions/index';\n/**\n * Google auth component which renders login/logout google buttons and uses gapi methods for creating a new auth object, signing in a user or signing out\n * please see docs for reference\n */\n\nclass GoogleAuth extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      isSignedIn === true ? this.props.signIn() : this.props.signOut;\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n\n    this.renderAuthButton = () => {\n      if (this.props.isSignedIn === null) {\n        return null;\n      } else if (this.props.isSignedIn) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"ui red google button\",\n          onClick: this.onSignOutClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"google icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }\n        }), \"Sign out\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"ui red google button\",\n          onClick: this.onSignInClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"google icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }\n        }), \"Sing in with Google\");\n      }\n    };\n  }\n\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client.init({\n        clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n        scope: 'email' //the list of scopes [methods of authorization]\n\n      }).then(() => {\n        //create a new auth reference to use for the user auth\n        this.auth = window.gapi.auth2.getAuthInstance(); //update auth in our redux store\n\n        this.onAuthChange(this.auth.isSignedIn.get()); //listen for changes to sign in for later\n\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  } //use the props mapped from state to sign in or out depending on the auth step\n\n\n  render() {\n    return this.renderAuthButton();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn //auth is the key (alias) for the auth reducer in our combined reducers in index/reducers -> reducers make up a whole state!\n\n  };\n}; //use connect to hook in to store passing it all the action creators to dispatch to store: reducers will invoke logic, mapStateToProps() always does just that: maps state changed, etc. from our action creators and actions sent ot those reducers to affect app level state\n\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/tannerbarcelos/OneDrive/DEV/Projects/StreamClone/client/src/components/GoogleAuth.js"],"names":["React","Component","connect","signIn","signOut","GoogleAuth","onAuthChange","isSignedIn","props","onSignInClick","auth","onSignOutClick","renderAuthButton","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","get","listen","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AACA;;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,kBAA9B;AAEA;;;;;AAKA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAyBjCK,YAzBiC,GAyBlBC,UAAU,IAAI;AAC3BA,MAAAA,UAAU,KAAK,IAAf,GAAsB,KAAKC,KAAL,CAAWL,MAAX,EAAtB,GAA6C,KAAKK,KAAL,CAAWJ,OAAxD;AACD,KA3BgC;;AAAA,SA6BjCK,aA7BiC,GA6BjB,MAAM;AACpB,WAAKC,IAAL,CAAUP,MAAV;AACD,KA/BgC;;AAAA,SAiCjCQ,cAjCiC,GAiChB,MAAM;AACrB,WAAKD,IAAL,CAAUN,OAAV;AACD,KAnCgC;;AAAA,SAsCjCQ,gBAtCiC,GAsCd,MAAM;AACvB,UAAI,KAAKJ,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAClC,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAChC,4BACE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAE,KAAKI,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,aADF;AAQD,OATM,MASA;AACL,4BACE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAE,KAAKF,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,wBADF;AAMD;AACF,KA1DgC;AAAA;;AACjC;AACAI,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAkB,cAAlB,EAAkC,MAAM;AACtC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACS;AACLC,QAAAA,QAAQ,EAAE,0EADL;AAELC,QAAAA,KAAK,EAAE,OAFF,CAEW;;AAFX,OADT,EAKGC,IALH,CAKS,MAAM;AACX;AACA,aAAKX,IAAL,GAAYI,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ,CAFW,CAGX;;AACA,aAAKjB,YAAL,CAAmB,KAAKI,IAAL,CAAUH,UAAV,CAAqBiB,GAArB,EAAnB,EAJW,CAKX;;AACA,aAAKd,IAAL,CAAUH,UAAV,CAAqBkB,MAArB,CAA6B,KAAKnB,YAAlC;AACD,OAZH;AAaD,KAfD;AAgBA;;;AAGD,GAtBgC,CAwBjC;;;AAoCAoB,EAAAA,MAAM,GAAI;AACR,WAAO,KAAKd,gBAAL,EAAP;AACD;;AA9DgC;;AAiEnC,MAAMe,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLrB,IAAAA,UAAU,EAAEqB,KAAK,CAAClB,IAAN,CAAWH,UADlB,CAC8B;;AAD9B,GAAP;AAGD,CAJD,C,CAMA;;;AACA,eAAeL,OAAO,CAAEyB,eAAF,EAAmB;AAACxB,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAnB,CAAP,CAA8CC,UAA9C,CAAf","sourcesContent":["import React, {Component} from 'react';\n\nimport {connect} from 'react-redux';\n\n//import actions to component we want to give stsate to from our store: remember, we pass our action creators to connecT(,here) to dispatch the actions\n//to the store and invoke reducers to change state\nimport {signIn, signOut} from '../actions/index';\n\n/**\n * Google auth component which renders login/logout google buttons and uses gapi methods for creating a new auth object, signing in a user or signing out\n * please see docs for reference\n */\n\nclass GoogleAuth extends Component {\n  //load the OATH system from google -> use did mount lifecycle method for requests that should happen immediately on load\n  componentDidMount () {\n    window.gapi.load ('client:auth2', () => {\n      //this is async: returns a promise -> this is where we will initiate the nww auth instance to sign the user in\n      window.gapi.client\n        .init ({\n          clientId: '106342742873-ntgcr1aoiros0i86ddb7uk5cvn5t1fi2.apps.googleusercontent.com',\n          scope: 'email', //the list of scopes [methods of authorization]\n        })\n        .then (() => {\n          //create a new auth reference to use for the user auth\n          this.auth = window.gapi.auth2.getAuthInstance ();\n          //update auth in our redux store\n          this.onAuthChange (this.auth.isSignedIn.get ());\n          //listen for changes to sign in for later\n          this.auth.isSignedIn.listen (this.onAuthChange);\n        });\n    });\n    /*load up the oath library from googles API -> see video 217-218 in react course [docs: https://developers.google.com/identity/sign-in/web/reference#authentication]\n    see these docs to see how to initiate an authentication system for the app\n    */\n  }\n\n  //use the props mapped from state to sign in or out depending on the auth step\n  onAuthChange = isSignedIn => {\n    isSignedIn === true ? this.props.signIn () : this.props.signOut;\n  };\n\n  onSignInClick = () => {\n    this.auth.signIn ();\n  };\n\n  onSignOutClick = () => {\n    this.auth.signOut ();\n  };\n\n  //helper method to do conditional rendering of button for sign in/sign out pertaining to the gapi auth\n  renderAuthButton = () => {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return (\n        <button className=\"ui red google button\" onClick={this.onSignOutClick}>\n          {/**did not use explicit constructor bind! used arrows and passed it as a callback here so its bound by default when using arrows.\n          THIS IS THE BEST PARADIGM! DO NOT USE () ON THE END OR ELSE ITS IMMEDIATELY CALLED! WE WANT THIS TO BE A CALLBACK*/}\n          <i className=\"google icon\" />\n          Sign out\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"ui red google button\" onClick={this.onSignInClick}>\n          <i className=\"google icon\" />\n          Sing in with Google\n        </button>\n      );\n    }\n  };\n\n  render () {\n    return this.renderAuthButton ();\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn, //auth is the key (alias) for the auth reducer in our combined reducers in index/reducers -> reducers make up a whole state!\n  };\n};\n\n//use connect to hook in to store passing it all the action creators to dispatch to store: reducers will invoke logic, mapStateToProps() always does just that: maps state changed, etc. from our action creators and actions sent ot those reducers to affect app level state\nexport default connect (mapStateToProps, {signIn, signOut}) (GoogleAuth);\n"]},"metadata":{},"sourceType":"module"}